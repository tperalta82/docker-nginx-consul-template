{{ range services -}}
  {{ if in .Tags (env "BALANCEBYTAG") -}}
    {{ $servicename := .Name -}}
    {{ $namespace := (print .Name "/") -}}
    {{ $servername := key_or_default (print $namespace "balancer/server_name") "" -}}
    {{ $sticky := key_or_default (print $namespace "balancer/sticky") "" -}}
    {{ $balancingmode := key_or_default (print $namespace "balancer/balancing_mode") "" -}}
    {{ $maxfails := key_or_default (print $namespace "balancer/max_fails") "" -}}
    {{ $failtimeout := key_or_default (print $namespace "balancer/fail_timeout") "" -}}
    {{ $weight := key_or_default (print $namespace "balancer/weight") "" -}}  
upstream {{ .Name }} {
  {{if $sticky }}ip_hash;{{- end}}
  {{if $balancingmode}}{{$balancingmode}};{{- end}}
  {{ range service $servicename -}}server {{.Address}}:{{.Port}}{{if $maxfails}} max_fails={{$maxfails}} {{- end}}{{if $failtimeout}} fail_timeout={{$failtimeout}} {{- end}}{{if $weight}} weight={{$weight}}{{- end}};
  {{else}}server 127.0.0.1:65535; # force a 502{{- end}}
}


server {
  listen 80;
  {{ if $servername }}server_name {{ $servername }}; {{- end}}
  set_by_lua $uuid '
    if ngx.var.http_x_request_id == nil then
        return uuid4.getUUID()
    else
        return ngx.var.http_x_request_id
    end
  ';

  location / {
    proxy_pass http://{{$servicename}};
    add_header access-control-allow-origin '*';
    add_header x-content-type-options 'nosniff';
	proxy_set_header X-REQUEST-ID $uuid;
	proxy_pass_header X-REQUEST-ID;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
  }
}


{{ end}}{{ end}}


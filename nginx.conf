{{ $servicename := env "SRV_NAME"}}
{{ $namespace := key_or_default (print $servicename "-namespace") ""}}
{{ $servername := key_or_default (print $namespace "balancer/server_name") "" }}
{{ $sticky := key_or_default (print $namespace "balancer/sticky") "" }}
{{ $balancingmode := key_or_default (print $namespace "balancer/balancing_mode") "" }}
{{ $maxfails := key_or_default (print $namespace "balancer/max_fails") "" }}
{{ $failtimeout := key_or_default (print $namespace "balancer/fail_timeout") "" }}
{{ $weight := key_or_default (print $namespace "balancer/weight") "" }}


upstream app {
  {{if $sticky }}ip_hash;{{end}}
  {{if $balancingmode}}{{$balancingmode}};{{end}}
  {{ $servicename := env "SRV_NAME"}}{{ range service $servicename }}server {{.Address}}:{{.Port}}{{if $maxfails}} max_fails={{$maxfails}} {{end}}{{if $failtimeout}} fail_timeout={{$failtimeout}} {{end}}{{if $weight}} weight={{$weight}}{{end}};
  {{else}}server 127.0.0.1:65535; # force a 502{{end}}
}

upstream merdas { 
}

server {
  listen 80 default_server;
  {{ if $servername }}server_name {{ $servername }}; {{end}}
  location / {
    proxy_pass http://app;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
  }
}

